/**
 * Budget Planner API
 * Application to track expenses and finance
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mohit@penguincoders.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParameterCodec,
  HttpParams,
  HttpResponse,
} from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { CustomHttpParameterCodec } from '../encoder';

// @ts-ignore
import { MessageResponse } from '../model/messageResponse';
// @ts-ignore
import { MonthlyBudgetDto } from '../model/monthlyBudgetDto';
// @ts-ignore
import { MonthlyBudgetResponse } from '../model/monthlyBudgetResponse';
// @ts-ignore
import { MonthlyExpenseResponse } from '../model/monthlyExpenseResponse';
// @ts-ignore
import { NewExpenseDto } from '../model/newExpenseDto';

// @ts-ignore
import { Configuration } from '../configuration';
import { BASE_PATH } from '../variables';

@Injectable({
  providedIn: 'root',
})
export class ExpenseControllerService {
  protected basePath = 'http://localhost:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string,
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string,
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10),
          );
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param username
   * @param newExpenseDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addExpense(
    username: string,
    newExpenseDto: NewExpenseDto,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<MessageResponse>;
  public addExpense(
    username: string,
    newExpenseDto: NewExpenseDto,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<MessageResponse>>;
  public addExpense(
    username: string,
    newExpenseDto: NewExpenseDto,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<MessageResponse>>;
  public addExpense(
    username: string,
    newExpenseDto: NewExpenseDto,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (username === null || username === undefined) {
      throw new Error(
        'Required parameter username was null or undefined when calling addExpense.',
      );
    }
    if (newExpenseDto === null || newExpenseDto === undefined) {
      throw new Error(
        'Required parameter newExpenseDto was null or undefined when calling addExpense.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (username !== undefined && username !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>username,
        'username',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        'Authorization',
        'Bearer ' + localVarCredential,
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Content-Type',
        httpContentTypeSelected,
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    return this.httpClient.post<MessageResponse>(
      `${this.configuration.basePath}/api/v1/expenses`,
      newExpenseDto,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param year
   * @param month
   * @param username
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getExpenses(
    year: number,
    month: number,
    username: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<MonthlyExpenseResponse>;
  public getExpenses(
    year: number,
    month: number,
    username: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<MonthlyExpenseResponse>>;
  public getExpenses(
    year: number,
    month: number,
    username: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<MonthlyExpenseResponse>>;
  public getExpenses(
    year: number,
    month: number,
    username: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (year === null || year === undefined) {
      throw new Error(
        'Required parameter year was null or undefined when calling getExpenses.',
      );
    }
    if (month === null || month === undefined) {
      throw new Error(
        'Required parameter month was null or undefined when calling getExpenses.',
      );
    }
    if (username === null || username === undefined) {
      throw new Error(
        'Required parameter username was null or undefined when calling getExpenses.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (year !== undefined && year !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>year,
        'year',
      );
    }
    if (month !== undefined && month !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>month,
        'month',
      );
    }
    if (username !== undefined && username !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>username,
        'username',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        'Authorization',
        'Bearer ' + localVarCredential,
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    return this.httpClient.get<MonthlyExpenseResponse>(
      `${this.configuration.basePath}/api/v1/expenses`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param year
   * @param month
   * @param username
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMonthlyBudget(
    year: number,
    month: number,
    username: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<MonthlyBudgetResponse>;
  public getMonthlyBudget(
    year: number,
    month: number,
    username: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<MonthlyBudgetResponse>>;
  public getMonthlyBudget(
    year: number,
    month: number,
    username: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<MonthlyBudgetResponse>>;
  public getMonthlyBudget(
    year: number,
    month: number,
    username: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (year === null || year === undefined) {
      throw new Error(
        'Required parameter year was null or undefined when calling getMonthlyBudget.',
      );
    }
    if (month === null || month === undefined) {
      throw new Error(
        'Required parameter month was null or undefined when calling getMonthlyBudget.',
      );
    }
    if (username === null || username === undefined) {
      throw new Error(
        'Required parameter username was null or undefined when calling getMonthlyBudget.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (year !== undefined && year !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>year,
        'year',
      );
    }
    if (month !== undefined && month !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>month,
        'month',
      );
    }
    if (username !== undefined && username !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>username,
        'username',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        'Authorization',
        'Bearer ' + localVarCredential,
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    return this.httpClient.get<MonthlyBudgetResponse>(
      `${this.configuration.basePath}/api/v1/expenses/budget`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param year
   * @param month
   * @param username
   * @param monthlyBudgetDto
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setMonthlyBudget(
    year: number,
    month: number,
    username: string,
    monthlyBudgetDto: MonthlyBudgetDto,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<MessageResponse>;
  public setMonthlyBudget(
    year: number,
    month: number,
    username: string,
    monthlyBudgetDto: MonthlyBudgetDto,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<MessageResponse>>;
  public setMonthlyBudget(
    year: number,
    month: number,
    username: string,
    monthlyBudgetDto: MonthlyBudgetDto,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<MessageResponse>>;
  public setMonthlyBudget(
    year: number,
    month: number,
    username: string,
    monthlyBudgetDto: MonthlyBudgetDto,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (year === null || year === undefined) {
      throw new Error(
        'Required parameter year was null or undefined when calling setMonthlyBudget.',
      );
    }
    if (month === null || month === undefined) {
      throw new Error(
        'Required parameter month was null or undefined when calling setMonthlyBudget.',
      );
    }
    if (username === null || username === undefined) {
      throw new Error(
        'Required parameter username was null or undefined when calling setMonthlyBudget.',
      );
    }
    if (monthlyBudgetDto === null || monthlyBudgetDto === undefined) {
      throw new Error(
        'Required parameter monthlyBudgetDto was null or undefined when calling setMonthlyBudget.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (year !== undefined && year !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>year,
        'year',
      );
    }
    if (month !== undefined && month !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>month,
        'month',
      );
    }
    if (username !== undefined && username !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>username,
        'username',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set(
        'Authorization',
        'Bearer ' + localVarCredential,
      );
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Accept',
        localVarHttpHeaderAcceptSelected,
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        'Content-Type',
        httpContentTypeSelected,
      );
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    return this.httpClient.post<MessageResponse>(
      `${this.configuration.basePath}/api/v1/expenses/budget`,
      monthlyBudgetDto,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
